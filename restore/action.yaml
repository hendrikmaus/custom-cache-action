name: 'Cache::restore'
description: 'Restore a custom cache from a container image'
inputs:
  registry:
    description: 'Container registry to use; make sure the workflow is authenticated'
    required: true
    default: 'ghcr.io'
  image:
    description: 'Container image name to use'
    required: true
    default: ${{ github.repository }}
  tag:
    description: 'Container image tag to use'
    required: true
    default: 'cache-latest'
outputs:
  cache_hit:
    description: 'Boolean to indicate if a cache was found'
    value: ${{ steps.restore.outputs.cache_hit }}
  tarball_path:
    description: 'Path to the tarball on disk'
    value: ${{ steps.restore.outputs.tarball_path }}
runs:
  using: "composite"
  steps:
    - name: Restore cache
      id: restore
      shell: bash
      run: |
        tempdir=$(mktemp -d)
        cd "${tempdir}"

        image=${{ inputs.registry }}/${{ inputs.image }}:${{ inputs.tag }}

        if ! docker pull "${image}" &>/dev/null; then
          echo "::set-output name=cache_hit::false"
          echo "No cache found"
          exit 0
        fi

        echo "creating cache container filesystem"
        # this container isn't actually started; we just gain access to its filesystem
        # it also does not contain 'bash", but we need to provide some argument, which is ignored
        docker create -ti --name cache_storage "${image}" bash
        docker cp cache_storage:cache.tgz .

        echo "expanding cache to disk"
        tar xpzf cache.tgz -P
        
        echo "::set-output name=cache_hit::true"
        echo "::set-output name=tarball_path::${tempdir}/cache.tgz"
